// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
    relationMode = "prisma"
}

model Teacher {
    id      String @id
    name    String
    email   String @unique
    classes Class[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    stripeCustomerId         String?
    stripeSubscriptionId     String?
    stripeSubscriptionStatus StripeSubscriptionStatus?
    reportCredits            Int?    @default(0)
    reportCreditsUsed        Int?    @default(0)
}

model Class {
    id      String @id @default(cuid())
    teacherId String
    teacher Teacher @relation(fields: [teacherId], references: [id])
    students Student[]
    criteria Criteria[]
    reports Report[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([teacherId])
}

model Student {
    id      String @id @default(cuid())
    name    String
    pronouns String
    classId String
    class Class @relation(fields: [classId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([classId])
}

model Criteria {
    id      String @id @default(cuid())
    type    CriteriaType
    value   String @db.Text
    classId String
    required Boolean @default(false)
    class Class @relation(fields: [classId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([classId])
}

enum ReportStatus {
    PENDING
    GENERATING
    GENERATED
    FAILED
}

model Report {
    id      String @id @default(cuid())
    classId String
    class Class @relation(fields: [classId], references: [id])
    studentEvaluation StudentEvaluation[] //fill with each student and their criteria
    comments Comment[]
    reportStatus ReportStatus @default(PENDING)
    reportExecutionId String @default("")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @default(now())
    //add whether report succeeded or failed to generate

    @@index([classId])
}

model StudentEvaluation {
    id      String @id @default(cuid())
    studentId String
    studentName String
    studentPronouns String
    criteriaValues CriteriaValuePair[]
    reportId String
    report Report @relation(fields: [reportId], references: [id])
    completed Boolean @default(false)

    @@index([studentId])
    @@index([reportId])
}

model CriteriaValuePair {
    id      String @id @default(cuid())
    studentEvaluationId String
    studentEvaluation StudentEvaluation @relation(fields: [studentEvaluationId], references: [id])
    criteriaId String
    criteriaType CriteriaType
    criteriaPrompt String @default("")
    criteriaValue String
    required Boolean

    @@index([studentEvaluationId])
}

model Comment {
    id      String @id @default(cuid())
    reportId String
    report Report @relation(fields: [reportId], references: [id])
    studentId String
    prompt String @db.Text
    comment String @db.Text

    @@index([reportId])
    @@index([studentId])
}

enum CriteriaType {
    BOOLEAN
    COMMENT
    ASSESSMENT
}

enum StripeSubscriptionStatus {
    incomplete
    incomplete_expired
    trialing
    active
    past_due
    canceled
    unpaid
    paused
}

model StripeEvent {
    id               String   @id @unique
    api_version      String?
    data             Json
    request          Json?
    type             String
    object           String
    account          String?
    created          DateTime
    livemode         Boolean
    pending_webhooks Int
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt @default(now())
}

model PaymentIntent {
    id                String   @id @unique
    userId            String?
    status            String
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
}